// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  email                 String                  @unique
  password              String
  role                  Role                    @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  EmailValidationResult EmailValidationResult[]
  APIKey                APIKey[]
}

model EmailValidationResult {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  email         String
  isValidSyntax Boolean
  hasValidMX    Boolean
  isDisposable  Boolean
  isRoleBased   Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_email_validation_user")
}

model SyntaxVerification {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  pattern   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DomainVerification {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  domain    String   @unique
  isValidMX Boolean
  checkedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DisposableEmailDetector {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  domain       String   @unique
  isDisposable Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RoleBasedEmailDetector {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  keyword   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model APILog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  endpoint  String
  response  String
  createdAt DateTime @default(now())
}

model APIKey {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  key        String    @unique
  service    String
  usageLimit Int
  used       Int       @default(0)
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime? @updatedAt
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

enum Role {
  ADMIN
  USER
  GUEST
}

